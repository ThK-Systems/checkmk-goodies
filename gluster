#!/bin/bash

# Copyright by ThK-Systems/Thomas Kuhlmann 2024
# Licensed by Apache License 2.0
#
# partially based on https://exchange.checkmk.com/p/gluster


# Adjust those values to your needs
VOLHEAL_MIN_SECS_WARN=75    # Wait x seconds to set service to warning
VOLHEAL_MIN_SECS_CRIT=280   # Wait x seconds to set service to critical

VOLHEAL_COUNT_WARN_NOW=10   # If at least n healings outstanding, goto warning independent from VOLHEAL*SECS values
VOLHEAL_COUNT_CRIT_NOW=25   # If at least n healings outstanding, goto critical independent from VOLHEAL*SECS values

# Common definitions (do not touch)
DIR_STATE=/var/lib/check_mk_agent/state

CMD_GLUSTER="/usr/sbin/gluster"
CMD_PIDOF="/bin/pidof"

LOG_PREFIX_DAEMON="Gluster services"
LOG_PREFIX_PEER="Gluster peer"
LOG_PREFIX_VOLUME="Gluster volume"

DATI=$(date +%s)

### Sub functions
log_volume_state() {
    local level=$1
    local healings=$2
    local volume=$3
    if [ $healings -ge $VOLHEAL_COUNT_CRIT_NOW ]; then
      level=2
    fi
    if [ $level -lt 2 ] && [ $healings -ge $VOLHEAL_COUNT_WARN_NOW ]; then
      level=1
    fi
    echo "$level \"$LOG_PREFIX_VOLUME $volume\" gluster_healings_$volume=$healings $volume_heals file(s) needs healing"
    return $level
}

### Check if this system has gluster installed
if [ ! -x "$CMD_GLUSTER" ]; then
  exit 0
fi

### Create state directory, if not exists
if [ ! -d $DIR_STATE ]; then
  mkdir -p $DIR_STATE
fi

### Check demons
if ! $CMD_PIDOF glusterd &>/dev/null; then
  echo "2 \"$LOG_PREFIX_DAEMON\" - Gluster management service is not running"
  exit 0
elif ! $CMD_PIDOF glusterfsd &>/dev/null; then
  echo "2 \"$LOG_PREFIX_DAEMON\" - Gluster brick service is not running"
  exit 0 
else
  echo "0 \"$LOG_PREFIX_DAEMON\" - Gluster services are all running"
fi

### Check peers
for peer in $($CMD_GLUSTER pool list | sed "s/localhost/$(hostname)/" | grep -v "UUID" | awk '{ print $2","$3 }')
do
  state=$(echo $peer | awk -F ',' '{ print $2 }')
  peer=$(echo $peer | awk -F ',' '{ print $1 }')
  if [ $state == "Connected" ]; then
    echo "0 \"$LOG_PREFIX_PEER $peer\" - Connected"
  else
    echo "2 \"$LOG_PREFIX_PEER $peer\" - Not connected ($state)"
  fi
done

### Check volumes
for volume in $($CMD_GLUSTER volume list); do
  volume_heals=0
  entries=

  for entries in $($CMD_GLUSTER volume heal $volume info | grep '^Number of entries: ' | awk '{print $4}' | sed 's/-/0/'); do
    if [ "$entries" -gt 0 ]; then
      volume_heals=$(( volume_heals + entries ))
    fi
  done

  state_file="$DIR_STATE/gluster_volume_state_$volume"

  if [ $volume_heals -gt 0 ]; then

    first_dati=$DATI
    if [ -f $state_file ]; then
      read -r first_dati last_log_level < $state_file
    fi

    log_level=2
    dati_diff=$(($DATI - $first_dati))
    if [ $dati_diff -gt $VOLHEAL_MIN_SECS_CRIT ]; then
      log_volume_state 2 $volume_heals $volume
      log_level=$?
    elif [[ $dati_diff -gt $VOLHEAL_MIN_SECS_WARN || $last_log_level -gt 0 ]]; then
      log_volume_state 1 $volume_heals $volume
      log_level=$?
    else
      log_volume_state 0 $volume_heals $volume
      log_level=$?
    fi

    echo "$first_dati $log_level" > $state_file

  else
    if [ -f $state_file ]; then
      rm $state_file
    fi
    log_volume_state 0 $volume_heals $volume
  fi

done
